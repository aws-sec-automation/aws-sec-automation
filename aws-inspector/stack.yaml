AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  License: Apache-2.0
Description: 'This templates enables AWS Inspector.'
Parameters:
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16
  PublicSubnetCIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24
  AzName:
    Type: String
    Default: eu-west-1a
  sshIp:
    Description: Change to your public IP
    Type: String
    Default: 10.0.0.0/0
  lambdaFunctionName:
    Type: "String"
    AllowedPattern: "^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$"
    Default: "t3chfest-awsinspector"
  rulePackageCVEArn:
    Type: "String"
    Default: "arn:aws:inspector:eu-west-1:357557129151:rulespackage/0-ubA5XvBh"
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
         - Key: Name
           Value: 'AWS_Sec_automation'
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AzName
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 'Public Subnet (AZ1)'
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: 'AWS_Sec_automation'
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: 'AWS_Sec_automation'
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: aws-sec-automation-SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: !Ref sshIp
          FromPort: 22
          ToPort: 22
      VpcId: !Ref VPC
      GroupDescription: "SG 22"
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      UserData:
        Fn::Base64:
          !Sub |
              #!/bin/bash -ex
              wget https://inspector-agent.amazonaws.com/linux/latest/install;
              sudo bash install;
              sudo snap start amazon-ssm-agent;
      ImageId: ami-035966e8adab4aaad
      InstanceType: "t2.micro"
      KeyName: rgonzalez-aws
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetId: !Ref PublicSubnet
      IamInstanceProfile: !Ref EC2InstanceProfile
      Tags:
        - Key: Name
          Value: EC2_Inspector
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role
    DependsOn: EC2Role
  ResourceGroup:
    Type: AWS::Inspector::ResourceGroup
    Properties:
      ResourceGroupTags:
        - Key: Name
          Value: EC2_Inspector
  AssessmentTarget:
    Type: AWS::Inspector::AssessmentTarget
    Properties:
        ResourceGroupArn : !GetAtt ResourceGroup.Arn
  AssessmentTemplate:
    Type: AWS::Inspector::AssessmentTemplate
    Properties:
      AssessmentTargetArn: !GetAtt AssessmentTarget.Arn
      AssessmentTemplateName: "Aws Inspector sec-aut"
      DurationInSeconds: 900
      RulesPackageArns:
        - !Ref rulePackageCVEArn
  lambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "AWS Config Remediation Code"
      FunctionName: !Ref "lambdaFunctionName"
      Timeout: 100
      Code:
        ZipFile: !Sub |
            # Copyright (c) 2016 Amazon Web Services, Inc.
            import boto3
            import json
            import logging
            import datetime
            ssm = boto3.client('ssm')
            inspector = boto3.client('inspector')
            logger = logging.getLogger()
            # quick function to handle datetime serialization problems
            enco = lambda obj: (
                obj.isoformat()
                if isinstance(obj, datetime.datetime)
                or isinstance(obj, datetime.date)
                else None
            )
            def handler(event, context):

                message = event['Records'][0]['Sns']['Message']
                notificationType = json.loads(message)['event']
                if notificationType != "FINDING_REPORTED":
                    logger.info('Skipping notification that is not a new finding: ' + notificationType)
                    return 1
                # extract finding ARN
                findingArn = json.loads(message)['finding']
                # get finding and extract detail
                response = inspector.describe_findings(findingArns = [ findingArn ], locale='EN_US')
                finding = response['findings'][0]
                # skip uninteresting findings
                title = finding['title']
                logger.debug('Finding title: ' + title)
                if title == "Unsupported Operating System or Version":
                    logger.info('Skipping finding: ' + title)
                    return 1
                if title == "No potential security issues found":
                    logger.info('Skipping finding: ' + title)
                    return 1
                service = finding['service']
                logger.debug('Service: ' + service)
                if service != "Inspector":
                    logger.info('Skipping finding from service: ' + service)
                    return 1
                cveId = ""
                for attribute in finding['attributes']:
                    if attribute['key'] == "CVE_ID":
                        cveId = attribute['value']
                        break
                logger.info('CVE ID: ' + cveId)
                if cveId == "":
                    return 1
                assetType = finding['assetType']
                if assetType != "ec2-instance":
                    return 1
                instanceId = finding['assetAttributes']['agentId']
                if not instanceId.startswith("i-"):
                    return 1
                filterList = [ { 'key': 'InstanceIds', 'valueSet': [ instanceId ] } ]
                response = ssm.describe_instance_information( InstanceInformationFilterList = filterList, MaxResults = 50 )
                instanceInfo = response['InstanceInformationList'][0]
                pingStatus = instanceInfo['PingStatus']
                lastPingTime = instanceInfo['LastPingDateTime']
                agentVersion = instanceInfo['AgentVersion']
                platformType = instanceInfo['PlatformType']
                osName = instanceInfo['PlatformName']
                osVersion = instanceInfo['PlatformVersion']
                if pingStatus != 'Online':
                    logger.info('SSM agent for this instance is not online: ' + pingStatus)
                    return 1
                if platformType != "Linux":
                    logger.info('Skipping non-Linux platform: ' + platformType)
                    return 1
                # to-do: patch only CVEs, or patch only the specific CVE
                if osName == 'Ubuntu':
                    commandLine = "apt-get update -qq -y; apt-get upgrade -y"
                elif osName == 'Amazon Linux AMI':
                    commandLine = "yum update -q -y; yum upgrade -y"
                else:
                    return 1
                response = ssm.send_command(
                    InstanceIds = [ instanceId ],
                    DocumentName = 'AWS-RunShellScript',
                    Comment = 'Lambda function performing Inspector CVE finding auto-remediation',
                    Parameters = { 'commands': [ commandLine ] }
                    )
                logger.info(response)
      Handler: "index.handler"
      Role: !GetAtt "lambdaIAMRole.Arn"
      Runtime: "python3.7"
  lambdaIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Resource: "*"
                Action:
                  - "inspector:DescribeFindings"
                  - "ssm:SendCommand"
                  - "ssm:DescribeInstanceInformation"
              - Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambdaFunctionName}:*"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
          PolicyName: "AwsInspectorRemediation_Lambda_Policy"
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "lambdaFunction.Arn"
      Principal: "sns.amazonaws.com"
      SourceArn: !Ref SNSTopic
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !GetAtt lambdaFunction.Arn
          Protocol: lambda
      TopicName: SNS_inspector
  SNSPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: SnsTopicPolicy
          Effect: Allow
          Principal:
            Service: inspector.amazonaws.com
          Action: sns:Publish
          Resource: "*"
      Topics:
        - !Ref SNSTopic
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      RoleName: EC2_ssm_role_inspector
