AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  License: Apache-2.0
Description: 'This templates enables AWS Cloudwatch.'
Parameters:
  lambdaFunctionName:
    Type: "String"
    AllowedPattern: "^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$"
    Default: "t3chfest-awscloudwatch"
Resources:
  lambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "AWS Cloudwatch Remediation Code"
      FunctionName: !Ref "lambdaFunctionName"
      Timeout: 900
      Code:
        ZipFile: !Sub |
          import json
          import boto3
          import os
          from botocore.exceptions import ClientError
          ec2 = boto3.client('ec2')

          def handler(event,context):
              #Creating delete request
              describe_open_ssh_security_groups()
              describe_open_s3_buckets()
              describe_users_withoutMFA()


          def describe_open_ssh_security_groups():
              client = boto3.client('ec2')
              paginator = client.get_paginator('describe_security_groups')
              response_iterator = paginator.paginate(Filters=[
                  {
                  'Name':'ip-permission.from-port',
                  'Values': ['22']
                  },
                  {
                      'Name': 'ip-permission.cidr',
                      'Values': ['0.0.0.0/0']
                  }
              ])
              SGs = []
              for r in response_iterator:
                  SGs.extend(r['SecurityGroups'])
              revokeSGs(SGs,client)

          def revokeSGs(sgs,client):
              for sg in sgs:
                  client.revoke_security_group_ingress(GroupName=sg['GroupName'], IpPermissions=sg['IpPermissions'])

          def describe_open_s3_buckets():
              client = boto3.client('s3')
              s3 = boto3.resource('s3')
              buckets = client.list_buckets()['Buckets']
              for b in buckets:
                  ACL = client.get_bucket_acl(
                      Bucket=b['Name']
                  )
                  ACL_grants = ACL['Grants']
                  for g in ACL_grants:
                     Grantee = g['Grantee']
                     if 'URI' in Grantee:
                         if Grantee['URI'] == 'http://acs.amazonaws.com/groups/global/AllUsers':
                              bucket = s3.Bucket(b['Name'])
                              acl = bucket.Acl()
                              acl.put(ACL='private')

          def describe_users_withoutMFA():
              client = boto3.client('iam')
              iam_users = []
              response = client.list_users()
              for user in response['Users']:
                  iam_users.append({'UserName':user['UserName'],'UserId':user['UserId']})
              while 'Marker' in response:
                  response = client.list_users(Marker=response['Marker'])
                  for user in response['Users']:
                      iam_users.append({'UserName':user['UserName'],'UserId':user['UserId']})
              no_mfa_users = []
              mfa_users = []
              for iam_user in iam_users:
                  response = client.list_mfa_devices(UserName=iam_user['UserName'])
                  if not response['MFADevices']:
                      no_mfa_users.append(iam_user)
                  else:
                      mfa_users.append(iam_user)
              for user in no_mfa_users:
                  attach_detach_RestrictivePolicy(user['UserId'],'NON_COMPLIANT')
              for user in mfa_users:
                  attach_detach_RestrictivePolicy(user['UserId'],'COMPLIANT')

          def attach_detach_RestrictivePolicy(userId,status):
              iam = boto3.resource('iam')
              client = boto3.client('iam')
              paginator = client.get_paginator('list_users')
              response_iterator = paginator.paginate()
              NON_COMPLIANT_USER = ""
              for r in response_iterator:
                  for u in r['Users']:
                      user = iam.User(u['UserName'])
                      user_id = user.user_id
                      if userId == user_id:
                          NON_COMPLIANT_USER =  user
                          break
              if status == "NON_COMPLIANT":
                  response = NON_COMPLIANT_USER.attach_policy(
                      PolicyArn=os.environ['PolicyARN']
                  )
              else:
                  response = NON_COMPLIANT_USER.detach_policy(
                      PolicyArn=os.environ['PolicyARN']
                  )
      Handler: "index.handler"
      Role: !GetAtt "lambdaIAMRole.Arn"
      Runtime: "python3.7"
      Environment:
        Variables:
          PolicyARN: !Ref ForceMFA
  lambdaIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Resource: "*"
                Action:
                  - "ec2:DescribeSecurityGroups"
                  - "ec2:RevokeSecurityGroupIngress"
                  - "iam:ListUsers"
                  - "iam:GetUser"
                  - "iam:AttachUserPolicy"
                  - "iam:DetachUserPolicy"
                  - "s3:ListAllMyBuckets"
                  - "s3:PutBucketAcl"
                  - "s3:GetBucketAcl"
                  - "iam:ListMFADevices"
              - Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambdaFunctionName}:*"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
          PolicyName: "AwsCloudwatchRemediation_Lambda_Policy"
  lambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${lambdaFunctionName}"
      RetentionInDays: 90
  AmazonCloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(1 hour)
      Targets:
        -
          Arn: !GetAtt lambdaFunction.Arn
          Id: LambdaConfigEvent
  ForceMFA:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowAllUsersToListAccounts"
            Effect: "Allow"
            Action:
              - "iam:ListAccountAliases"
              - "iam:ListUsers"
            Resource: !Sub "arn:aws:iam::${AWS::AccountId}:user/*"
          - Sid: "AllowIndividualUserToSeeTheirAccountInformation"
            Effect: "Allow"
            Action:
              - "iam:ChangePassword"
              - "iam:CreateLoginProfile"
              - "iam:DeleteLoginProfile"
              - "iam:GetAccountPasswordPolicy"
              - "iam:GetAccountSummary"
              - "iam:GetLoginProfile"
              - "iam:UpdateLoginProfile"
            Resource:
              Fn::Join:
                - ""
                - - !Sub "arn:aws:iam::${AWS::AccountId}:user"
                  - "/${aws:username}"
          - Sid: "AllowIndividualUserToListTheirMFA"
            Effect: "Allow"
            Action:
              - "iam:ListVirtualMFADevices"
              - "iam:ListMFADevices"
            Resource:
              - !Sub "arn:aws:iam::${AWS::AccountId}:mfa/*"
              - Fn::Join:
                  - ""
                  - - !Sub "arn:aws:iam::${AWS::AccountId}"
                    - ":user/${aws:username}"
          - Sid: "AllowIndividualUserToManageThierMFA"
            Effect: "Allow"
            Action:
              - "iam:CreateVirtualMFADevice"
              - "iam:DeactivateMFADevice"
              - "iam:DeleteVirtualMFADevice"
              - "iam:EnableMFADevice"
              - "iam:ResyncMFADevice"
            Resource:
              - Fn::Join:
                  - ""
                  - - !Sub "arn:aws:iam::${AWS::AccountId}"
                    - ":mfa/${aws:username}"
              - Fn::Join:
                  - ""
                  - - !Sub "arn:aws:iam::${AWS::AccountId}"
                    - ":user/${aws:username}"
          - Sid: "DoNotAllowAnythingOtherThanAboveUnlessMFAd"
            Effect: "Deny"
            NotAction: "iam:*"
            Resource: "*"
